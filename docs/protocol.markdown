# Overview #

Use the [LSL HTTP server](http://wiki.secondlife.com/wiki/LSL_http_server) to
simplify configuration and control by putting advanced controls on the hosted
pages of GitHub, then making browser-to-object calls. This prevents needing any
parsing engine within the script, and greatly simplifies the "server-client"
type interactions within the script. It means the only third party server
needed is the host for the admin/stats interface. It also greatly reduces the
memory impact of the script, freeing up space for further configuration.

# CORS #

Cross-Origin Resource Sharing has a number of security implications within
browsers, and not all browsers handle it the same way. Thus the following rules
have been adopted:

* Blanket approval of all verbs from all hosts
* Always request/use an SSL URL
* Only use the POST verb
* No custom headers
* Only use the "text/plain" mime-type
* Expect no cookies

See [this](http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx)
for some more detail on why.

Unfortunately IE prior to version 10 (9 and below) will not support
cross-protocol requests, so the HTTP-to-HTTPS nature of the requests from
GitHub's project-pages will not work, but that's a small price to pay to work
pretty much everywhere else and get free hosting ;-)

# Structure #

lslguru.github.io/easy-gacha/<version>/#callbackURL[/adminkey]
callbackURL[/adminkey]/<command>[/parameters]

## version ##

Baked in to prevent breaking existing scripts in the future.

## callbackURL ##

This is the result of using llEscapeURL on the URL generated by the sim.

## adminkey ##

A UUID automatically generated by the script, to prevent spoofing by
non-owners. Needs to be regenerated every time the context changes.

## command ##

The primary operation being performed. Generally speaking it will be one of three things:

* Get information
* Set a value / replace list with single value
* Append to an existing value (string or list)

This keeps the protocol ridiculously simple, and puts the onus of complex
display and understanding on the JavaScript UI. That way the LSL script is
freed to perform the more in-world specific tasks. Modifying values would
require passing more information than the new value, which would be cumbersome,
and also consume far more in-script memory as duplicates of the list would be
made temporarily. This does slow the process down a bit, as the script has to
make multiple sequential calls, but that's an acceptable trade-off.

## parameters ##

Technically these will be part of the command (baked in), but are a logical
separation for the source code. Best to avoid doing any complex string parsing
if possible.

# Content Format #

This will depend on the specific variable/command, but generally speaking the type of a variable will be known ahead of time, so variables should be transferred as a raw cast (string) and parsed on both ends.

Lists should be JSON encoded using

    string llList2Json( JSON\_ARRAY , list values )
    list llJson2List( string src )

VERY IMPORTANT NOTE: in the http\_request event, body is limited to 2048 bytes; anything longer will be truncated to 2048 bytes
